/*
    CH-230-A
    a5_p8.c
    Revaz Benidze
    rbenidze@jacobs-university.de
*/
 
#include <stdio.h>
#include <stdlib.h>
 
void input(int** m1, int** m2, int n, int m, int p) {
    int i;
    int j;
 
    for (i = 0; i < n; i++) //1 matrix elements input//
        for (j = 0; j < m; j++)
            scanf("%d", &m1[i][j]);
 
    for (i = 0; i < m; i++) //2 matrix elements input//
        for (j = 0; j < p; j++)
            scanf("%d", &m2[i][j]);
}
 
void output(int** m1, int** m2, int n, int m, int l) {
    int i;
    int j;
 
    printf("Matrix A:\n");
 
for (i = 0; i < n; i++) { //1 matrix elements output//
 
        for (j = 0; j < m; j++)
            printf("%d ", m1[i][j]);
 
        printf("\n");
    }
 
    printf("Matrix B:\n");
 
 
    
    for (i = 0; i < m; i++) { //2 matrix elements output//
 
        for (j = 0; j < l; j++)
            printf("%d ", m2[i][j]);
 
        printf("\n");
    }
}
 
void product(int** m1, int** m2, int** m3, int n, int m, int l) {
    int i;
    int k;
    int j; 
 
    printf("The multiplication result AxB:\n");
    // print and calculate multiplication of matrices//
    for (i = 0; i < n; i++) {
        for (k = 0; k < l; k++) {
            m3[i][k] = 0;
            for (j = 0; j < m; j++) //formula of matrix multiplication//
            m3[i][k] += m1[i][j] * m2[j][k];
            printf("%d ", m3[i][k]);
        }
        printf("\n");
    }
}
 
 
int main() {
    int n; //declare dimention//
    int m;
    int e;
    scanf("%d", &n);
    scanf("%d", &m);
    scanf("%d", &e);
 
    int** m1; //declare matrices//
    int** m2;
    int** m3;
 
    // dynamically allocate memory for the 1 matrix//
    m1 = (int**)malloc(sizeof(int) * n);
    if (m1 == NULL)
        exit(1);
 
    for (int i = 0; i < n; i++) {
        m1[i] = (int*)malloc(sizeof(int) * m);
        if (m1[i] == NULL)
            exit(1);
    }
 
    //dynamically allocate memory for the 2 matrix//
    m2 = (int**)malloc(sizeof(int) * m);
    if (m2 == NULL)
        exit(1);
 
    for (int i = 0; i < m; i++) {
        m2[i] = (int*)malloc(sizeof(int) * e);
        if (m2[i] == NULL)
            exit(1);
    }
    m3 = (int**)malloc(sizeof(int) * n);
    if (m3 == NULL)
        exit(1);
 
    for (int i = 0; i < n; i++) {
        m3[i] = (int*)malloc(sizeof(int) * e);
        if (m3[i] == NULL)
            exit(1);
    }
 
    input(m1, m2, n, m, e); //prints results//
    output(m1, m2, n, m, e);
    product(m1, m2, m3, n, m, e);
 
    for (int i = 0; i < n; i++)  //freeing memory//
        free(m1[n]);
    free(m1);
 
    for (int i = 0; i < m; i++)
        free(m2[m]);
    free(m2);
 
    for (int i = 0; i < e; i++)
        free(m3[e]);
    free(m3);
 
    return 0;
}